@model FormGroupsVcModel

@using SharpMember.ViewComponents;
@using System.Reflection;

@foreach (var item in Model.Type.GetProperties(BindingFlags.Public | BindingFlags.Instance))
{
    if (Model.HidenFields.Contains(item.Name.ToLower()))
    {
        <div class="form-group">
            @Html.Hidden(item.Name, value: item.GetValue(Model.Instance))
        </div>
        continue;
    }

    bool is_readonly = Model.ReadonlyFields.Contains(item.Name.ToLower());

    switch (Type.GetTypeCode(item.PropertyType))
    {
        case TypeCode.Int16:
        case TypeCode.Int32:
        case TypeCode.Int64:
            <div class="form-group">
                @Html.Label(item.Name, item.Name, htmlAttributes: new { @class = "control-label" })
                @{ 
                    object numberHtmlAttr = new { @class = "form-control", type = "number" };
                    if (is_readonly)
                    {
                        numberHtmlAttr = new { @class = "form-control", type = "number", @readonly = "readonly" };
                    }
                }
                @Html.TextBox(item.Name, value: item.GetValue(Model.Instance), htmlAttributes: numberHtmlAttr)
                @Html.ValidationMessage(item.Name, htmlAttributes: new { @class = "text-danger" })
            </div>
            break;

        case TypeCode.Boolean:
            <div class="form-group">
                <div class="checkbox">
                    <label>
                        @Html.CheckBox(item.Name, (bool)item.GetValue(Model.Instance)) @item.Name
                    </label>
                </div>
            </div>
            break;

        case TypeCode.Object:
            if (item.PropertyType == typeof(DateTime?))
            {
                <div class="form-group">
                    @Html.Label(item.Name, item.Name, htmlAttributes: new { @class = "control-label" })
                    @{ 
                        object dateHtmlAttr = new { @class = "form-control", type = "date" };
                        if (is_readonly)
                        {
                            dateHtmlAttr = new { @class = "form-control", type = "date", @readonly = "readonly" };
                        }
                    }
                    @Html.TextBox(item.Name, value: item.GetValue(Model.Instance), htmlAttributes: dateHtmlAttr)
                    @Html.ValidationMessage(item.Name, htmlAttributes: new { @class = "text-danger" })
                </div>
            }
            break;

        default:
            <div class="form-group">
                @Html.Label(item.Name, item.Name, htmlAttributes: new { @class = "control-label" })
                @{
                    object textHtmlAttr = new { @class = "form-control" };
                    if (is_readonly)
                    {
                        textHtmlAttr = new { @class = "form-control", @readonly = "readonly" };
                    }
                }

                @if(@Model.TextAreaFields.Contains(item.Name.ToLower()))
                {
                    @Html.TextArea(item.Name, value: (string)item.GetValue(Model.Instance), htmlAttributes: textHtmlAttr)
                }
                else
                {
                    @Html.TextBox(item.Name, value: item.GetValue(Model.Instance), htmlAttributes: textHtmlAttr)
                }
                @Html.ValidationMessage(item.Name, htmlAttributes: new { @class = "text-danger" })
            </div>
            break;
    }
}